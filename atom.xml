<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jeremy Bush's Tech Dump]]></title>
  <link href="http://zombor.github.com/atom.xml" rel="self"/>
  <link href="http://zombor.github.com/"/>
  <updated>2012-11-01T10:02:48-05:00</updated>
  <id>http://zombor.github.com/</id>
  <author>
    <name><![CDATA[Jeremy Bush]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[well-designed-application-architectures-part-3]]></title>
    <link href="http://zombor.github.com/blog/2012/10/29/well-designed-application-architectures-part-3/"/>
    <updated>2012-10-29T07:37:00-05:00</updated>
    <id>http://zombor.github.com/blog/2012/10/29/well-designed-application-architectures-part-3</id>
    <content type="html"><![CDATA[<p><a href="http://zombor.github.com/blog/2012/10/02/well-designed-application-architectures-part-2/">Last time</a> we talked about how your business logic should look. It was a high level overview of the architecture. This time we&#8217;ll actually put that into practice and write some code. We&#8217;ll be using BDD (Behavior-Driven-Development) to design the application.</p>

<p>We&#8217;re going to be using <a href="http://behat.org/">Behat</a> to run these features. So let&#8217;s start a new project!</p>

<pre><code>mkdir sample-app; cd sample-app
git init
</code></pre>

<p>We&#8217;ll use composer to install Behat:</p>

<figure class='code'><figcaption><span>composer&#46;json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "require": {
</span><span class='line'>    "behat/behat": "2.4.*@stable"
</span><span class='line'>  },
</span><span class='line'>  "config": {
</span><span class='line'>    "bin-dir": "bin/"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And let&#8217;s install it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://getcomposer.org/installer | php
</span><span class='line'>php composer.phar install --prefer-source
</span><span class='line'>
</span><span class='line'>bin/behat --init</span></code></pre></td></tr></table></div></figure>


<p>So where do we start? BDD says we should start from the outside and move our way in. So, we&#8217;ll start with some Gherkin. I&#8217;ll make up some requirements that you might receive from a product manager:</p>

<figure class='code'><figcaption><span>features/register_account&#46;feature </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Feature: User Registration
</span><span class='line'>
</span><span class='line'>  Scenario: User Registers With Valid Data
</span><span class='line'>    Given I am an unregistered user
</span><span class='line'>    When I register with the following information:
</span><span class='line'>      | first_name | foo         |
</span><span class='line'>      | last_name  | bar         |
</span><span class='line'>      | email      | foo@bar.com |
</span><span class='line'>      | password   | foobar      |
</span><span class='line'>    Then I should be registered
</span><span class='line'>    And I should receive a welcome registration email
</span><span class='line'>
</span><span class='line'>  Scenario: User Registers With Invalid Data
</span><span class='line'>    Given I am an unregistered user
</span><span class='line'>    When I register with the following information:
</span><span class='line'>      | first_name | foo         |
</span><span class='line'>      | last_name  | bar         |
</span><span class='line'>      | email      | foo@bar.com |
</span><span class='line'>      | password   |             |
</span><span class='line'>    Then I should not be registered
</span><span class='line'>    And I should see the following errors:
</span><span class='line'>    """
</span><span class='line'>    password is required
</span><span class='line'>    """</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s run it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin/behat</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll see a bunch of undefined steps with some snippet code. Let&#8217;s paste these into our context file (features/bootstrap/FeatureContext.php) and rerun behat. Now we&#8217;ll see some TODOs! Time to actually write code! We&#8217;ll start from the top:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Given I am an unregistered user</span></code></pre></td></tr></table></div></figure>


<p>This is going to be a no-op. We don&#8217;t need to do anything here, so let&#8217;s just remove the PendingException in the step defintion:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> *  @Given /^I am an unregistered user$/
</span><span class='line'> */
</span><span class='line'>public function iAmAnUnregisteredUser()
</span><span class='line'>{
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now that step should be green when we re-run the behat steps. We&#8217;ll move on to the next step. Here&#8217;s where the real meat will start. Since we are writing our business logic, we&#8217;ll start with defining the interface we want to work with, and write the code we <em>wish</em> we had.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * @When /^I register with the following information:$/
</span><span class='line'> */
</span><span class='line'>public function iRegisterWithTheFollowingInformation(TableNode $table)
</span><span class='line'>{
</span><span class='line'>  $parsed_data = [];
</span><span class='line'>  foreach ($table->getNumeratedRows() as $row)
</span><span class='line'>  {
</span><span class='line'>    $parsed_data[$row[0]] = $row[1];
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  $register = new Account_Registration;
</span><span class='line'>  $result = $register->execute($parsed_data);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This might be something we would want. Instantiate a new use case class (Account_Registration), and call it&#8217;s execute() method with our registration data.</p>

<p>Let&#8217;s run this in behat:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PHP Fatal error:  Class 'Account_Registration' not found</span></code></pre></td></tr></table></div></figure>


<p>Now we are blocked, we have an error in our tests. So let&#8217;s make this thing pass:</p>

<figure class='code'><figcaption><span>classes/Account/Registration&#46;php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>
</span><span class='line'>class Account_Registration
</span><span class='line'>{
</span><span class='line'>  public function execute($params = [])
</span><span class='line'>  {
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Also make sure you require this file in your FeatureContext class.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'classes/Account/Registration.php';</span></code></pre></td></tr></table></div></figure>


<p>Now if you run behat, we&#8217;ll have the next step green in both scenarios.</p>

<p>Let&#8217;s move on to the next step. What do we do here? How do we assert the account was created? Simple. We want to use Dependancy Injection, and inject a <em>repository object</em> into the use case class. The use case will then use that repository to persist the data. We will use a mock object to keep track of this. We don&#8217;t want to use the real thing because we don&#8217;t care about the database right now (we will later, and we&#8217;ll replace this code later). We&#8217;ll need to modify our last step definition:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$this->account_repo = new Mock_Account_Repository;
</span><span class='line'>$register = new Account_Registration($this->account_repo);</span></code></pre></td></tr></table></div></figure>


<p>Now when we run behat, we&#8217;ll get a fatal error about this Mock class not existing. So let&#8217;s just create it at the end of the file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Mock_Account_Repository implements Account_Repository
</span><span class='line'>{
</span><span class='line'>  public $create_called = FALSE;
</span><span class='line'>  public $create_data = NULL;
</span><span class='line'>
</span><span class='line'>  public function create($data)
</span><span class='line'>  {
</span><span class='line'>    $this->create_called = TRUE;
</span><span class='line'>    $this->create_data = $data;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And we&#8217;ll need to define that interface. Let&#8217;s do that in our classes folder:</p>

<figure class='code'><figcaption><span>classes/Account/Repository&#46;php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>interface Account_Repository {
</span><span class='line'>  public function create(array $data);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Make sure you require that file right above the Mock_Account_Repository class defined above. Now we need to assert that our class does what we want. So in our next step definition, we&#8217;ll inspect that mock object:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> *  @Then /^I should be registered$/
</span><span class='line'> */
</span><span class='line'>public function iShouldBeRegistered()
</span><span class='line'>{
</span><span class='line'>  Assertion::true($this->account_repo->create_called);
</span><span class='line'>  Assertion::same($this->data, $this->account_repo->create_data);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now when you run this, it should fail. So let&#8217;s make it pass.</p>

<figure class='code'><figcaption><span>classes/Account/Registration&#46;php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>
</span><span class='line'>class Account_Registration
</span><span class='line'>{
</span><span class='line'>  protected $_account_repository;
</span><span class='line'>
</span><span class='line'>  public function __construct(Account_Repository $account_repository)
</span><span class='line'>  {
</span><span class='line'>    $this->_account_repository = $account_repository;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public function execute($params = [])
</span><span class='line'>  {
</span><span class='line'>    $this->_account_repository->create($params);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>On to the next step! We want to send an email out to the user after they register. We need to abstract out the email handling, so let&#8217;s make a mock class for that too.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Mock_Email_Sender implements Email_Sender
</span><span class='line'>{
</span><span class='line'>  protected $sent = array();
</span><span class='line'>
</span><span class='line'>  public function send_mail($to, $from, $subject, $body)
</span><span class='line'>  {
</span><span class='line'>    $this->sent[] = array('to' => $to, 'from' => $from, 'subject' => $subject, 'body' => $body);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And the interface for this class:</p>

<figure class='code'><figcaption><span>classes/Email/Sender&#46;php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>
</span><span class='line'>interface Email_Sender
</span><span class='line'>{
</span><span class='line'>  public function send_mail($to, $from, $subject, $body);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And let&#8217;s add this to the step definition:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> *  @Given /^I should receive a welcome registration email$/
</span><span class='line'> */
</span><span class='line'>public function iShouldReceiveAWelcomeRegistrationEmail()
</span><span class='line'>{
</span><span class='line'>  Assertion::same($this->email, $this->email_sender->sent[0]['to']);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll need to modify some previous steps for this. When you are done, you should get an error like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Notice: Undefined offset: 0 in features/bootstrap/FeatureContext.php line 81</span></code></pre></td></tr></table></div></figure>


<p>So we just need to make this pass. Easy:</p>

<figure class='code'><figcaption><span>classes/Account/Registration&#46;php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public function execute($params = [])
</span><span class='line'>  {
</span><span class='line'>    $this->_account_repository->create($params);
</span><span class='line'>    $this->_email_sender->send_mail($params['email'], 'donotreply@foo.com', 'Welcome!', 'The body');
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>Sweet! Our first scenario passes! You should be able to implement the rest of the second scenario fairly easily.</p>

<p>This concludes our tutorial on creating a basic Interactor class. It doesn&#8217;t do much right now, but next time we&#8217;ll add in some validation, and do some other fun stuff with phpspec.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Well Designed Application Architectures - Part 2 - Business Logic]]></title>
    <link href="http://zombor.github.com/blog/2012/10/02/well-designed-application-architectures-part-2/"/>
    <updated>2012-10-02T06:29:00-05:00</updated>
    <id>http://zombor.github.com/blog/2012/10/02/well-designed-application-architectures-part-2</id>
    <content type="html"><![CDATA[<p><a href="http://zombor.github.com/blog/2012/09/25/well-designed-application-architectures-part-1/">Last time</a> we talked about what MVC really is, and how to use it properly. It didn&#8217;t really mention much of anything about how/where to put the code that makes your site tick. This code is called your <em>application</em>. It&#8217;s the business logic that, you know, actually does the real work on the site.</p>

<p>If you recall from last time, I said that this code should live far, far away from your delivery mechanism (your MVC layer). That&#8217;s pretty abstract. Where should it <em>really</em> go? How do you write it?</p>

<p>A lot of people look at me funny when I say &#8220;do not write your business logic with a framework&#8221;. They think &#8220;how on earth will I get anything done?&#8221;. It&#8217;s actually very easy, and not time consuming at all if you do it right.</p>

<h2>Language</h2>

<p>I&#8217;m going to be using PHP for my code examples here. I prefer Ruby, but it seems that it&#8217;s &#8220;harder&#8221; to do this in PHP, so I want to show that it&#8217;s actually not.</p>

<h2>File Organization</h2>

<p>First off, put your business logic into it&#8217;s own repository. This will make the separtion clear and force you to not muck the separation of concerns together. You&#8217;ll also be able to recognize your application&#8217;s purpose from it&#8217;s file structure, as described in the Uncle Bob talk from last time.</p>

<p>People in the PHP world seem to like the <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md">PSR-0</a> standard for file and class naming so we&#8217;ll use that, but not the silly PSR-1 and PSR-2 &#8220;standards&#8221;.</p>

<h1>Components</h1>

<p>Below are the components that we&#8217;ll be using to design our application.</p>

<h2>Use Cases</h2>

<p>Back in school you learned about a <a href="http://en.wikipedia.org/wiki/Use_case">Use Case</a>, right? Well, they aren&#8217;t useless after all. Use cases are the backbone of how your application works. We&#8217;ll be using a use case driven architecture from now on.</p>

<p>Why? They let us define our classes in a structured way, and let any reader of our code know exactly where to go when they need to look at some functionality. Need to know about how a user registers? Simply go to the Register_User class, all the code is there.</p>

<h3>DCI vs Interactors</h3>

<p>I prefer to use the <a href="http://en.wikipedia.org/wiki/Data,_context_and_interaction">DCI</a> pattern for describing my use cases in code. However, it&#8217;s not clear how to implement DCI in many languages. Because of this, I&#8217;ll just be describing <em>interactors</em>, which are a similar but simpler way to write use cases.</p>

<p>DCI makes <em>a lot</em> more sense overall, but in some languages (especially php), it&#8217;s just impossible to implement properly. You basically would need the ability to assign traits to objects at runtime (at the minimum), and php is certainly not capable of that.</p>

<p>An interactor is just a class that describes your use case. It has the following properties:</p>

<ul>
<li>It has a single public entry point, <code>execute()</code></li>
<li>All other methods are protected or private</li>
<li>It raises exceptions when an error occurs</li>
<li>It returns normalized data (like an array) for a query operation, and returns nothing for a write operation</li>
<li>It injects all it&#8217;s dependancies. I like to use factory methods for these, so I&#8217;ll do that in my examples later on</li>
</ul>


<h2>Database Access</h2>

<p>So where does your database access come into play in all this? A lot of frameworks make you think about the database entirely too early. The database is just a detail about where/how your data gets persisted. Don&#8217;t worry about it too much yet. Just worry about defining your Data Objects first. We&#8217;ll use a <em>repository pattern</em> to send those data objects to be persisted, and it doesn&#8217;t really matter to anyone but the repository class on how that&#8217;s done.</p>

<h2>Data Objects</h2>

<p>Your data objects classes that model your business objects. They don&#8217;t extend anything, they don&#8217;t connect to a database. In php, they are just POPOs (Plain old php objects). Here&#8217;s a good example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>
</span><span class='line'>class User
</span><span class='line'>{
</span><span class='line'>  public $id;
</span><span class='line'>  public $email;
</span><span class='line'>  public $password;
</span><span class='line'>  public $first_name;
</span><span class='line'>  public $last_name;
</span><span class='line'>
</span><span class='line'>  public function __construct($data)
</span><span class='line'>  {
</span><span class='line'>    $this->id = $data['id'];
</span><span class='line'>    $this->email = $data['email'];
</span><span class='line'>    $this->password = $data['password'];
</span><span class='line'>    $this->first_name = $data['first_name'];
</span><span class='line'>    $this->last_name = $data['last_name'];
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Easy.</p>

<h2>Repository Classes</h2>

<p>A repository class is an object that persists and retrieves data objects. That&#8217;s all it does. Here&#8217;s an example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>
</span><span class='line'>class User_Repository_Database implements User_Repository
</span><span class='line'>{
</span><span class='line'>  protected $_db;
</span><span class='line'>
</span><span class='line'>  public function __construct(Database $db)
</span><span class='line'>  {
</span><span class='line'>    $this->_db = $db;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public function create(User $user)
</span><span class='line'>  {
</span><span class='line'>    $this->_db->insert('users')->values($user->as_array());
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public function find_by_id($id)
</span><span class='line'>  {
</span><span class='line'>    return $this->_db->from('users)->where('id', '=', $id)->as_object('User');
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The repository class should take data objects in, and spit data objects back out. That&#8217;s it.</p>

<p>Next time we&#8217;ll start building an actual interactor.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Well Designed Application Architectures - Part 1 - MVC]]></title>
    <link href="http://zombor.github.com/blog/2012/09/25/well-designed-application-architectures-part-1/"/>
    <updated>2012-09-25T16:06:00-05:00</updated>
    <id>http://zombor.github.com/blog/2012/09/25/well-designed-application-architectures-part-1</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been dumping my brain about this topic in IRC for about 3-4 months now, and I figure it would just be easiest to do a dump here and link people to it. This series will probably be a few parts, I&#8217;m just going to do parts of the dump for a few days.</p>

<p>If you have feedback for me, please use twitter (on the right over there) to do so.</p>

<p>Before I begin, you should watch this (I&#8217;m basically going to be rehashing it and adding my own notes): <iframe width="640" height="360" src="http://www.youtube.com/embed/WpkDN78P884?feature=player_detailpage" frameborder="0" allowfullscreen></iframe></p>

<h2>MVC</h2>

<p>So, lets start with MVC. Web-based MVC (yes, not the &#8220;real&#8221; kind). &#8220;What&#8217;s wrong with MVC?&#8221;, you might ask? Well, nothing, as long as you use it for it&#8217;s strengths: as a delivery mechanism pattern. We&#8217;ll get into what a delivery mechanism is in a bit. So, how do you use MVC effectively? Well, lets start with the different parts of the acronym:</p>

<h3>Controller</h3>

<p>Your controllers are thin, right? Do they contain <em>only</em> http logic? If they contain any business logic at all, they are not thin. Just because it&#8217;s not database calls doesn&#8217;t mean you can throw it in the controller. The controller shouldn&#8217;t know anything about your domain logic. It should just know:</p>

<ul>
<li>How to parse incoming request data</li>
<li>How to send that data to your business classes</li>
<li>How to send the output from the business classes to the view</li>
</ul>


<p>That&#8217;s <em>it</em>! What do you gain from doing this?</p>

<ul>
<li>Your controllers are even thinner</li>
<li>Your controllers are probably testable in isolation, so you can test your http interactions quickly, and without a real web server or framework loading up</li>
</ul>


<h3>Views</h3>

<p>When I say &#8220;view&#8221;, does &#8220;class&#8221; also come into mind? Are you doing all your presentation logic in your templates? Stop it! You can&#8217;t test that. Use something like <a href="http://mustache.github.com/">Mustache</a>. What do you gain by using Mustache?</p>

<ul>
<li>Logicless templates</li>
<li>Testable views</li>
<li>Portable templates (you can reuse your same templates in both your server and client).</li>
</ul>


<p>Logicless templates let you start your views with tests (You do TDD, right?). It keeps your views more maintainable and lets you be more confident that the logic contained in them actually <em>works</em>.</p>

<p>When you write your view classes, they should only accept input from the outside world. They should not be reaching into the database, they should not be instantiating any classes (especially not models!). All they should be doing is accepting input from the controller and formatting that input for display. This display can be anything: html, json, xml, etc. This is another advantage of using mustache: it lets you easily adjust your output template, and not change your logic that parses the data. Reuse people!</p>

<h3>Model</h3>

<p>Wow, what a big area. Basically anything that isn&#8217;t a controller or view goes here. That is A LOT. This is the first problem with using MVC 100% to design your application. If you subscribe to the &#8220;thin controller, fat model&#8221; approach (as just about all web frameworks out there teach you), you <em>will</em> end up with an unmaintainable mess of an application.</p>

<p>Why? Well, first off, you&#8217;ll be combining your domain logic (since your controllers are thin, right?) and your persistance logic (just about every framework tells you to put queries in a model) in the same layer. This is very bad for many reasons:</p>

<ul>
<li>Hard to test</li>
<li>Slow to test</li>
<li>Tests will do too much</li>
</ul>


<p>A lot of the topics in this series will revolve around testing. How can you make your application easier to test? How can you <em>start</em> with tests?</p>

<p>So what can we do? Easy: Don&#8217;t use models. Just don&#8217;t. Models don&#8217;t belong in your MVC delivery mechanism. In this sense, I suppose I should be calling it CVT (Controller-View-Template).</p>

<h2>Delivery Mechanism</h2>

<p>What&#8217;s this &#8220;delivery mechanism&#8221; thing, anyway? A delivery mechanism is:</p>

<p><em>A framework of classes that easily let you redistribute your business logic (your application) in a format specific way, over a specific medium.</em></p>

<p>Your application is not made up of controllers and views. That stuff is all part of your delivery mechanism. So from here on out, I&#8217;ll be refering to your <em>business logic</em> as your <em>application</em>.</p>

<p>You <em>do</em> need these things. You don&#8217;t want to be writing http request and response classes. That crap is already done, and it&#8217;s a lot of work.</p>

<p>A delivery mechanism&#8217;s sole purpose is to call your application, and send it&#8217;s output to a specific format. It could be an html website, a JSON based REST API, or a console based binary. All three of these could be delivering the exact same business logic. All three of these could be different frameworks, because your application is completely decoupled from your delivery mechanism.</p>

<p>Your delivery mechanism should not know anything about your business rules, except how to call the application. It <em>consumes</em> your application, and spits out the data.</p>

<p>Ever cry when your favorite framework released an upgrade, and it broke the old API? Separate your application from your delivery mechanism, and upgrading to a new version (or a completely different) framework becomes much easier. The framework code no longer has it&#8217;s slimy tentacles embeded inside <em>your</em> code. That means less code to change.</p>

<p>This brings me to a related topic: You should try like hell to never have your business logic classes extend a third party class. Don&#8217;t let someone else taint your class&#8217;s API with theirs. You&#8217;ll just end up in a similar situation to the framework problem above. I&#8217;ll go into more details on this in a future post.</p>

<h2>Business Logic</h2>

<p>&#8220;If we can&#8217;t use models, then were the hell does the business logic go?&#8221; You might be asking. Easy:</p>

<p>Far, far, far, far away from your MVC layer. We&#8217;ll get into the details on this next time.</p>
]]></content>
  </entry>
  
</feed>
